{
  "hash": "1feaf79adf1a87a93c08e192bf8d07e3",
  "result": {
    "markdown": "---\ntitle: Time Series Analysis\nformat:\n  revealjs:\n    incremental: true\n---\n\n## Time Series\n\nA time series is a sequence of observations taken sequentially in time.\n\n# Time Series Objects in Python\n\n## Necessary packages \n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\n```\n:::\n\n\n## Date and Times in Python\n\n<!--The Python world has a number of available representations of dates, times, deltas, and timespans. While the time series tools provided by Pandas tend to be the most useful for data science applications, it is helpful to see their relationship to other packages used in Python.-->\n\n**Keywords**\n\n- Date\n\n- Time \n\n- Time-indexed data\n\n## Python representation of date and time\n\n1. Time stamps\n\n    A point in time (e.g., December 23rd, 2022 at 7:00am)\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\npd.Timestamp('2022-12-23 17:25')\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\nTimestamp('2022-12-23 17:25:00')\n```\n:::\n:::\n\n\n##\n\n2. Time intervals and periods \n\n    Example: particular day\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\npd.Period('2017-06-13')\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\nPeriod('2017-06-13', 'D')\n```\n:::\n:::\n\n\n## \n\n3. Time deltas or durations \n\n    Exact length of time \n    \n# `pandas` Time Series: index by time\n\n## Index - Yearly\n\n**Method 1**\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nindex1 = pd.DatetimeIndex(['2012', '2013', '2014', '2015', '2016'])\ndata1 = pd.Series([123, 39, 78, 52, 110], index=index1)\ndata1\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\n2012-01-01    123\n2013-01-01     39\n2014-01-01     78\n2015-01-01     52\n2016-01-01    110\ndtype: int64\n```\n:::\n:::\n\n\n## Index - Yearly (cont.)\n\n**Method 2**\n\n`freq='AS'` for start of year\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nindex2 = pd.date_range(\"2012\", periods=5, freq='AS')\nindex2\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\nDatetimeIndex(['2012-01-01', '2013-01-01', '2014-01-01', '2015-01-01',\n               '2016-01-01'],\n              dtype='datetime64[ns]', freq='AS-JAN')\n```\n:::\n:::\n\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\ndata2 = pd.Series([123, 39, 78, 52, 110], index=index2)\ndata2\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\n2012-01-01    123\n2013-01-01     39\n2014-01-01     78\n2015-01-01     52\n2016-01-01    110\nFreq: AS-JAN, dtype: int64\n```\n:::\n:::\n\n\n## Index - Yearly (cont.)\n\n**Method 3**\n\n`freq='A'` end of year frequency\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nindex3 = pd.date_range(\"2012\", periods=5, freq='A')\nindex3\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\nDatetimeIndex(['2012-12-31', '2013-12-31', '2014-12-31', '2015-12-31',\n               '2016-12-31'],\n              dtype='datetime64[ns]', freq='A-DEC')\n```\n:::\n:::\n\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\ndata3 = pd.Series([123, 39, 78, 52, 110], index=index3)\ndata3\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\n2012-12-31    123\n2013-12-31     39\n2014-12-31     78\n2015-12-31     52\n2016-12-31    110\nFreq: A-DEC, dtype: int64\n```\n:::\n:::\n\n\n## Index - Yearly (cont.)\n\n**Method 4**\n\nAnnual indexing with arbitrary month\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\nindex4 = pd.date_range(\"2012\", periods=5, freq='AS-NOV')\nindex4\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\nDatetimeIndex(['2012-11-01', '2013-11-01', '2014-11-01', '2015-11-01',\n               '2016-11-01'],\n              dtype='datetime64[ns]', freq='AS-NOV')\n```\n:::\n:::\n\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\ndata4 = pd.Series([123, 39, 78, 52, 110], index=index4)\ndata4\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\n2012-11-01    123\n2013-11-01     39\n2014-11-01     78\n2015-11-01     52\n2016-11-01    110\nFreq: AS-NOV, dtype: int64\n```\n:::\n:::\n\n\n## Index - Yearly (cont.)\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\nindex = pd.period_range('2012-01', periods=8, freq='A')\nindex\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\nPeriodIndex(['2012', '2013', '2014', '2015', '2016', '2017', '2018', '2019'], dtype='period[A-DEC]', freq='A-DEC')\n```\n:::\n:::\n\n\n## Index - Monthly\n\n**Method 1**\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\nindex = pd.period_range('2022-01', periods=8, freq='M')\nindex\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```\nPeriodIndex(['2022-01', '2022-02', '2022-03', '2022-04', '2022-05', '2022-06',\n             '2022-07', '2022-08'],\n            dtype='period[M]', freq='M')\n```\n:::\n:::\n\n\n**Method 2**\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\nindex = pd.period_range(start='2022-01-01', end='2022-08-02', freq='M')\nindex\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\nPeriodIndex(['2022-01', '2022-02', '2022-03', '2022-04', '2022-05', '2022-06',\n             '2022-07', '2022-08'],\n            dtype='period[M]', freq='M')\n```\n:::\n:::\n\n\n## Index - Quarterly\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\nindex = pd.period_range('2022-01', periods=8, freq='Q')\nindex\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```\nPeriodIndex(['2022Q1', '2022Q2', '2022Q3', '2022Q4', '2023Q1', '2023Q2',\n             '2023Q3', '2023Q4'],\n            dtype='period[Q-DEC]', freq='Q-DEC')\n```\n:::\n:::\n\n\n## Index  - Daily\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\nindex = pd.period_range('2022-01-01', periods=8, freq='D')\nindex\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```\nPeriodIndex(['2022-01-01', '2022-01-02', '2022-01-03', '2022-01-04',\n             '2022-01-05', '2022-01-06', '2022-01-07', '2022-01-08'],\n            dtype='period[D]', freq='D')\n```\n:::\n:::\n\n\n## Index  - Hourly\n\n**Range of hourly timestamps**\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\npd.period_range('2022-01', periods=8, freq='H')\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```\nPeriodIndex(['2022-01-01 00:00', '2022-01-01 01:00', '2022-01-01 02:00',\n             '2022-01-01 03:00', '2022-01-01 04:00', '2022-01-01 05:00',\n             '2022-01-01 06:00', '2022-01-01 07:00'],\n            dtype='period[H]', freq='H')\n```\n:::\n:::\n\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\npd.date_range('2022-01', periods=8, freq='H')\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```\nDatetimeIndex(['2022-01-01 00:00:00', '2022-01-01 01:00:00',\n               '2022-01-01 02:00:00', '2022-01-01 03:00:00',\n               '2022-01-01 04:00:00', '2022-01-01 05:00:00',\n               '2022-01-01 06:00:00', '2022-01-01 07:00:00'],\n              dtype='datetime64[ns]', freq='H')\n```\n:::\n:::\n\n\n**Sequence of durations increasing by an hour**\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\npd.timedelta_range(0, periods=10, freq='H')\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n```\nTimedeltaIndex(['0 days 00:00:00', '0 days 01:00:00', '0 days 02:00:00',\n                '0 days 03:00:00', '0 days 04:00:00', '0 days 05:00:00',\n                '0 days 06:00:00', '0 days 07:00:00', '0 days 08:00:00',\n                '0 days 09:00:00'],\n               dtype='timedelta64[ns]', freq='H')\n```\n:::\n:::\n\n\n## Frequency spacing options in `pandas`\n\nhttps://jakevdp.github.io/PythonDataScienceHandbook/03.11-working-with-time-series.html\n\n## References\n\n[https://jakevdp.github.io/PythonDataScienceHandbook/03.11-working-with-time-series.html](https://jakevdp.github.io/PythonDataScienceHandbook/03.11-working-with-time-series.html)\n\n",
    "supporting": [
      "file1_files"
    ],
    "filters": [],
    "includes": {}
  }
}