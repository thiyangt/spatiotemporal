{
  "hash": "057db9cce35da5aa88c6d3e547a3c2fb",
  "result": {
    "markdown": "---\ntitle: 'Time Series: Objects in Python and Visualization'\nformat:\n  revealjs:\n    slide-number: true\n    show-slide-number: print\n---\n\n## Time Series\n\nA time series is a sequence of observations taken sequentially in time.\n\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n**Cross-sectional data**\n\n::: {.cell execution_count=1}\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ID</th>\n      <th>calories</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>420</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>380</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>390</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nObservations that come from different individuals or groups at a single point in time.\n\n:::\n\n\n::: {.column width=\"50%\"}\n\n**Time series data**\n\n::: {.cell execution_count=2}\n\n::: {.cell-output .cell-output-display execution_count=2}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Year</th>\n      <th>Sales</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2019</td>\n      <td>490</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2020</td>\n      <td>980</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2021</td>\n      <td>260</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nA set of observations, along with some information about what times those observations were recorded.\n\n:::\n\n::::\n\n## DateTime\n\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n**Cross-sectional data**\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nimport pandas as pd\ndata = {\n  \"ID\": [1, 2, 3],\n  \"calories\": [420, 380, 390]\n  \n}\n\n#load data into a DataFrame object:\ndfc = pd.DataFrame(data)\ndfc\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ID</th>\n      <th>calories</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>420</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>380</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>390</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n:::\n\n\n::: {.column width=\"50%\"}\n\n**Time series data**\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\ndata = {\n  \"Year\": [2019, 2020, 2021],\n  \"Sales\": [490, 980, 260]\n  \n}\n\n#load data into a DataFrame object:\ndft = pd.DataFrame(data)\ndft\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Year</th>\n      <th>Sales</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2019</td>\n      <td>490</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2020</td>\n      <td>980</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2021</td>\n      <td>260</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n:::\n\n::::\n\n\n## DateTime\n\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n**Cross-sectional data**\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\ndfc.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 3 entries, 0 to 2\nData columns (total 2 columns):\n #   Column    Non-Null Count  Dtype\n---  ------    --------------  -----\n 0   ID        3 non-null      int64\n 1   calories  3 non-null      int64\ndtypes: int64(2)\nmemory usage: 176.0 bytes\n```\n:::\n:::\n\n\n:::\n\n\n::: {.column width=\"50%\"}\n\n**Time series data**\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\ndft.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 3 entries, 0 to 2\nData columns (total 2 columns):\n #   Column  Non-Null Count  Dtype\n---  ------  --------------  -----\n 0   Year    3 non-null      int64\n 1   Sales   3 non-null      int64\ndtypes: int64(2)\nmemory usage: 176.0 bytes\n```\n:::\n:::\n\n\n:::\n\n::::\n\n\n## Necessary packages \n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\nimport datetime\n```\n:::\n\n\n## Read AirPassenger\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\nairpassenger = pd.read_csv('AirPassengers.csv')\nairpassenger\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Month</th>\n      <th>#Passengers</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1949-01</td>\n      <td>112</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1949-02</td>\n      <td>118</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1949-03</td>\n      <td>132</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1949-04</td>\n      <td>129</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1949-05</td>\n      <td>121</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>139</th>\n      <td>1960-08</td>\n      <td>606</td>\n    </tr>\n    <tr>\n      <th>140</th>\n      <td>1960-09</td>\n      <td>508</td>\n    </tr>\n    <tr>\n      <th>141</th>\n      <td>1960-10</td>\n      <td>461</td>\n    </tr>\n    <tr>\n      <th>142</th>\n      <td>1960-11</td>\n      <td>390</td>\n    </tr>\n    <tr>\n      <th>143</th>\n      <td>1960-12</td>\n      <td>432</td>\n    </tr>\n  </tbody>\n</table>\n<p>144 rows Ã— 2 columns</p>\n</div>\n```\n:::\n:::\n\n\n## AirPassenger dataset\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\nairpassenger.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 144 entries, 0 to 143\nData columns (total 2 columns):\n #   Column       Non-Null Count  Dtype \n---  ------       --------------  ----- \n 0   Month        144 non-null    object\n 1   #Passengers  144 non-null    int64 \ndtypes: int64(1), object(1)\nmemory usage: 2.4+ KB\n```\n:::\n:::\n\n\n## Data Visualization\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\nimport plotnine\nfrom plotnine import *\nggplot(airpassenger, aes(x='Month', y='#Passengers'))+geom_line()\n```\n\n::: {.cell-output .cell-output-display}\n![](file1_files/figure-revealjs/cell-11-output-1.png){}\n:::\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\n<ggplot: (-9223372036477945884)>\n```\n:::\n:::\n\n\n## Convert to Date and Time\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\nfrom datetime import datetime\nairpassenger['Month']= pd.to_datetime(airpassenger['Month'])\nairpassenger.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 144 entries, 0 to 143\nData columns (total 2 columns):\n #   Column       Non-Null Count  Dtype         \n---  ------       --------------  -----         \n 0   Month        144 non-null    datetime64[ns]\n 1   #Passengers  144 non-null    int64         \ndtypes: datetime64[ns](1), int64(1)\nmemory usage: 2.4 KB\n```\n:::\n:::\n\n\n## Data Visualization\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\nggplot(airpassenger, aes(x='Month', y='#Passengers'))+geom_line()\n```\n\n::: {.cell-output .cell-output-display}\n![](file1_files/figure-revealjs/cell-13-output-1.png){}\n:::\n\n::: {.cell-output .cell-output-display execution_count=12}\n```\n<ggplot: (377654420)>\n```\n:::\n:::\n\n\n## Data Visualization\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\nggplot(airpassenger, aes(x='Month', y='#Passengers'))+geom_line()+geom_point()\n```\n\n::: {.cell-output .cell-output-display}\n![](file1_files/figure-revealjs/cell-14-output-1.png){}\n:::\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\n<ggplot: (-9223372036477427035)>\n```\n:::\n:::\n\n\n## Split date into month and year\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\nairpassenger['year'] = airpassenger['Month'].dt.year\nairpassenger['month'] = airpassenger['Month'].dt.month\n```\n:::\n\n\n## Split date into month and year (cont.)\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\nairpassenger\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Month</th>\n      <th>#Passengers</th>\n      <th>year</th>\n      <th>month</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1949-01-01</td>\n      <td>112</td>\n      <td>1949</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1949-02-01</td>\n      <td>118</td>\n      <td>1949</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1949-03-01</td>\n      <td>132</td>\n      <td>1949</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1949-04-01</td>\n      <td>129</td>\n      <td>1949</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1949-05-01</td>\n      <td>121</td>\n      <td>1949</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>139</th>\n      <td>1960-08-01</td>\n      <td>606</td>\n      <td>1960</td>\n      <td>8</td>\n    </tr>\n    <tr>\n      <th>140</th>\n      <td>1960-09-01</td>\n      <td>508</td>\n      <td>1960</td>\n      <td>9</td>\n    </tr>\n    <tr>\n      <th>141</th>\n      <td>1960-10-01</td>\n      <td>461</td>\n      <td>1960</td>\n      <td>10</td>\n    </tr>\n    <tr>\n      <th>142</th>\n      <td>1960-11-01</td>\n      <td>390</td>\n      <td>1960</td>\n      <td>11</td>\n    </tr>\n    <tr>\n      <th>143</th>\n      <td>1960-12-01</td>\n      <td>432</td>\n      <td>1960</td>\n      <td>12</td>\n    </tr>\n  </tbody>\n</table>\n<p>144 rows Ã— 4 columns</p>\n</div>\n```\n:::\n:::\n\n\n## Time Series Patterns\n\n### Trend\n\nLong-term increase or decrease in the data.\n\n### Seasonal\n\nA seasonal pattern exists when a series is influenced by seasonal factors (e.g., the quarter of the year, the month, or day of the week). Seasonality is always of a fixed and known period. Hence, seasonal time series are sometimes called periodic time series.\n\nPeriod is unchanging and associated with some aspect of the calendar.\n\n## Time Series Patterns (cont)\n\n### Cyclic\n\nA cyclic pattern exists when data exhibit rises and falls that are not of fixed period. The duration of these fluctuations is usually of at least 2 years.\nIn general,\n\nthe average length of cycles is longer than the length of a seasonal pattern.\n\nthe magnitude of cycles tends to be more variable than the magnitude of seasonal patterns\n\n## Example: trend\n\n![](time/trend.png)\n\n## Example: seasonal\n\n![](time/seasonal.png)\n\n## Example: multiple seasonality\n\n![](time/ms.png)\n\n## Example: Trend + Seasonal\n\n![](time/trendsea.png)\n\n## Cyclic\n\n![](time/cyclic.png)\n## Cyclic + Seasonal\n\n![](time/cs.png)\n\n## Frequency of a time series: Seasonal periods\n\n![](time/freq.png)\n\n## Seasonal plots\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\nggplot(airpassenger, aes(x='month', y='#Passengers', color='year'))+geom_point()\n```\n\n::: {.cell-output .cell-output-display}\n![](file1_files/figure-revealjs/cell-17-output-1.png){}\n:::\n\n::: {.cell-output .cell-output-display execution_count=16}\n```\n<ggplot: (-9223372036500999971)>\n```\n:::\n:::\n\n\n## Seasonal plots\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\nggplot(airpassenger, aes(x='month', y='#Passengers', color='factor(year)'))+geom_point()\n```\n\n::: {.cell-output .cell-output-display}\n![](file1_files/figure-revealjs/cell-18-output-1.png){}\n:::\n\n::: {.cell-output .cell-output-display execution_count=17}\n```\n<ggplot: (377909992)>\n```\n:::\n:::\n\n\n## Seasonal plots\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\nggplot(airpassenger, aes(x='month', y='#Passengers', color='factor(year)'))+geom_line()\n```\n\n::: {.cell-output .cell-output-display}\n![](file1_files/figure-revealjs/cell-19-output-1.png){}\n:::\n\n::: {.cell-output .cell-output-display execution_count=18}\n```\n<ggplot: (-9223372036475656974)>\n```\n:::\n:::\n\n\n## Seasonal plots\n\n::: {.cell execution_count=19}\n``` {.python .cell-code}\nggplot(airpassenger, aes(x='month', y='#Passengers', color='factor(year)'))+geom_line() + geom_point() \n```\n\n::: {.cell-output .cell-output-display}\n![](file1_files/figure-revealjs/cell-20-output-1.png){}\n:::\n\n::: {.cell-output .cell-output-display execution_count=19}\n```\n<ggplot: (-9223372036474893557)>\n```\n:::\n:::\n\n\n## Seasonal plots\n\n::: {.cell execution_count=20}\n``` {.python .cell-code}\nggplot(airpassenger, aes(x='month', y='#Passengers', color='factor(month)'))+ geom_boxplot() \n```\n\n::: {.cell-output .cell-output-display}\n![](file1_files/figure-revealjs/cell-21-output-1.png){}\n:::\n\n::: {.cell-output .cell-output-display execution_count=20}\n```\n<ggplot: (378272520)>\n```\n:::\n:::\n\n\n## Seasonal plots\n\n::: {.cell execution_count=21}\n``` {.python .cell-code}\nggplot(airpassenger, aes(x='month', y='#Passengers', color='factor(month)'))+ geom_point()+ geom_boxplot() \n```\n\n::: {.cell-output .cell-output-display}\n![](file1_files/figure-revealjs/cell-22-output-1.png){}\n:::\n\n::: {.cell-output .cell-output-display execution_count=21}\n```\n<ggplot: (-9223372036474895132)>\n```\n:::\n:::\n\n\n## Seasonal plots\n\n::: {.cell execution_count=22}\n``` {.python .cell-code}\nggplot(airpassenger, aes(x='month', y='#Passengers', color='factor(month)'))+ geom_point()+ geom_boxplot(alpha=0.5) \n```\n\n::: {.cell-output .cell-output-display}\n![](file1_files/figure-revealjs/cell-23-output-1.png){}\n:::\n\n::: {.cell-output .cell-output-display execution_count=22}\n```\n<ggplot: (-9223372036476503236)>\n```\n:::\n:::\n\n\n## Yearly variation\n\n::: {.cell execution_count=23}\n``` {.python .cell-code}\nggplot(airpassenger, aes(x='year', y='#Passengers', color='factor(year)'))+ geom_point()+ geom_boxplot(alpha=0.5) \n```\n\n::: {.cell-output .cell-output-display}\n![](file1_files/figure-revealjs/cell-24-output-1.png){}\n:::\n\n::: {.cell-output .cell-output-display execution_count=23}\n```\n<ggplot: (275239744)>\n```\n:::\n:::\n\n\n# `pandas` Time Series: index by time\n\n## Index - Yearly\n\n**Method 1**\n\n::: {.cell execution_count=24}\n``` {.python .cell-code}\nindex1 = pd.DatetimeIndex(['2012', '2013', '2014', '2015', '2016'])\ndata1 = pd.Series([123, 39, 78, 52, 110], index=index1)\ndata1\n```\n\n::: {.cell-output .cell-output-display execution_count=24}\n```\n2012-01-01    123\n2013-01-01     39\n2014-01-01     78\n2015-01-01     52\n2016-01-01    110\ndtype: int64\n```\n:::\n:::\n\n\n## Index - Yearly (cont.)\n\n**Method 2**\n\n`freq='AS'` for start of year\n\n::: {.cell execution_count=25}\n``` {.python .cell-code}\nindex2 = pd.date_range(\"2012\", periods=5, freq='AS')\nindex2\n```\n\n::: {.cell-output .cell-output-display execution_count=25}\n```\nDatetimeIndex(['2012-01-01', '2013-01-01', '2014-01-01', '2015-01-01',\n               '2016-01-01'],\n              dtype='datetime64[ns]', freq='AS-JAN')\n```\n:::\n:::\n\n\n::: {.cell execution_count=26}\n``` {.python .cell-code}\ndata2 = pd.Series([123, 39, 78, 52, 110], index=index2)\ndata2\n```\n\n::: {.cell-output .cell-output-display execution_count=26}\n```\n2012-01-01    123\n2013-01-01     39\n2014-01-01     78\n2015-01-01     52\n2016-01-01    110\nFreq: AS-JAN, dtype: int64\n```\n:::\n:::\n\n\n## Index - Yearly (cont.)\n\n**Method 3**\n\n`freq='A'` end of year frequency\n\n::: {.cell execution_count=27}\n``` {.python .cell-code}\nindex3 = pd.date_range(\"2012\", periods=5, freq='A')\nindex3\n```\n\n::: {.cell-output .cell-output-display execution_count=27}\n```\nDatetimeIndex(['2012-12-31', '2013-12-31', '2014-12-31', '2015-12-31',\n               '2016-12-31'],\n              dtype='datetime64[ns]', freq='A-DEC')\n```\n:::\n:::\n\n\n::: {.cell execution_count=28}\n``` {.python .cell-code}\ndata3 = pd.Series([123, 39, 78, 52, 110], index=index3)\ndata3\n```\n\n::: {.cell-output .cell-output-display execution_count=28}\n```\n2012-12-31    123\n2013-12-31     39\n2014-12-31     78\n2015-12-31     52\n2016-12-31    110\nFreq: A-DEC, dtype: int64\n```\n:::\n:::\n\n\n## Index - Yearly (cont.)\n\n**Method 4**\n\nAnnual indexing with arbitrary month\n\n::: {.cell execution_count=29}\n``` {.python .cell-code}\nindex4 = pd.date_range(\"2012\", periods=5, freq='AS-NOV')\nindex4\n```\n\n::: {.cell-output .cell-output-display execution_count=29}\n```\nDatetimeIndex(['2012-11-01', '2013-11-01', '2014-11-01', '2015-11-01',\n               '2016-11-01'],\n              dtype='datetime64[ns]', freq='AS-NOV')\n```\n:::\n:::\n\n\n::: {.cell execution_count=30}\n``` {.python .cell-code}\ndata4 = pd.Series([123, 39, 78, 52, 110], index=index4)\ndata4\n```\n\n::: {.cell-output .cell-output-display execution_count=30}\n```\n2012-11-01    123\n2013-11-01     39\n2014-11-01     78\n2015-11-01     52\n2016-11-01    110\nFreq: AS-NOV, dtype: int64\n```\n:::\n:::\n\n\n## Index - Yearly (cont.)\n\n::: {.cell execution_count=31}\n``` {.python .cell-code}\nindex = pd.period_range('2012-01', periods=8, freq='A')\nindex\n```\n\n::: {.cell-output .cell-output-display execution_count=31}\n```\nPeriodIndex(['2012', '2013', '2014', '2015', '2016', '2017', '2018', '2019'], dtype='period[A-DEC]', freq='A-DEC')\n```\n:::\n:::\n\n\n## Index - Monthly\n\n**Method 1**\n\n::: {.cell execution_count=32}\n``` {.python .cell-code}\nindex = pd.period_range('2022-01', periods=8, freq='M')\nindex\n```\n\n::: {.cell-output .cell-output-display execution_count=32}\n```\nPeriodIndex(['2022-01', '2022-02', '2022-03', '2022-04', '2022-05', '2022-06',\n             '2022-07', '2022-08'],\n            dtype='period[M]', freq='M')\n```\n:::\n:::\n\n\n**Method 2**\n\n::: {.cell execution_count=33}\n``` {.python .cell-code}\nindex = pd.period_range(start='2022-01-01', end='2022-08-02', freq='M')\nindex\n```\n\n::: {.cell-output .cell-output-display execution_count=33}\n```\nPeriodIndex(['2022-01', '2022-02', '2022-03', '2022-04', '2022-05', '2022-06',\n             '2022-07', '2022-08'],\n            dtype='period[M]', freq='M')\n```\n:::\n:::\n\n\n## Index - Quarterly\n\n::: {.cell execution_count=34}\n``` {.python .cell-code}\nindex = pd.period_range('2022-01', periods=8, freq='Q')\nindex\n```\n\n::: {.cell-output .cell-output-display execution_count=34}\n```\nPeriodIndex(['2022Q1', '2022Q2', '2022Q3', '2022Q4', '2023Q1', '2023Q2',\n             '2023Q3', '2023Q4'],\n            dtype='period[Q-DEC]', freq='Q-DEC')\n```\n:::\n:::\n\n\n## Index  - Daily\n\n::: {.cell execution_count=35}\n``` {.python .cell-code}\nindex = pd.period_range('2022-01-01', periods=8, freq='D')\nindex\n```\n\n::: {.cell-output .cell-output-display execution_count=35}\n```\nPeriodIndex(['2022-01-01', '2022-01-02', '2022-01-03', '2022-01-04',\n             '2022-01-05', '2022-01-06', '2022-01-07', '2022-01-08'],\n            dtype='period[D]', freq='D')\n```\n:::\n:::\n\n\n## Index  - Hourly\n\n**Range of hourly timestamps**\n\n::: {.cell execution_count=36}\n``` {.python .cell-code}\npd.period_range('2022-01', periods=8, freq='H')\n```\n\n::: {.cell-output .cell-output-display execution_count=36}\n```\nPeriodIndex(['2022-01-01 00:00', '2022-01-01 01:00', '2022-01-01 02:00',\n             '2022-01-01 03:00', '2022-01-01 04:00', '2022-01-01 05:00',\n             '2022-01-01 06:00', '2022-01-01 07:00'],\n            dtype='period[H]', freq='H')\n```\n:::\n:::\n\n\n::: {.cell execution_count=37}\n``` {.python .cell-code}\npd.date_range('2022-01', periods=8, freq='H')\n```\n\n::: {.cell-output .cell-output-display execution_count=37}\n```\nDatetimeIndex(['2022-01-01 00:00:00', '2022-01-01 01:00:00',\n               '2022-01-01 02:00:00', '2022-01-01 03:00:00',\n               '2022-01-01 04:00:00', '2022-01-01 05:00:00',\n               '2022-01-01 06:00:00', '2022-01-01 07:00:00'],\n              dtype='datetime64[ns]', freq='H')\n```\n:::\n:::\n\n\n**Sequence of durations increasing by an hour**\n\n::: {.cell execution_count=38}\n``` {.python .cell-code}\npd.timedelta_range(0, periods=10, freq='H')\n```\n\n::: {.cell-output .cell-output-display execution_count=38}\n```\nTimedeltaIndex(['0 days 00:00:00', '0 days 01:00:00', '0 days 02:00:00',\n                '0 days 03:00:00', '0 days 04:00:00', '0 days 05:00:00',\n                '0 days 06:00:00', '0 days 07:00:00', '0 days 08:00:00',\n                '0 days 09:00:00'],\n               dtype='timedelta64[ns]', freq='H')\n```\n:::\n:::\n\n\n## Define multiple frequencies\n\n> Next lesson\n\n## Correlation\n\n![](time/cor.png)\n\n## Autocorrelation\n\n![](time/auto.png)\n\n## ACF plot\n\n::: {.cell execution_count=39}\n``` {.python .cell-code}\nimport pandas as pd\nfrom matplotlib import pyplot as plt\nfrom statsmodels.graphics.tsaplots import plot_acf\n# Select relevant data, index by Date\ndata = airpassenger[['Month', '#Passengers']].set_index(['Month'])\n# Calculate the ACF (via statsmodel)\ndata\n```\n\n::: {.cell-output .cell-output-display execution_count=39}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>#Passengers</th>\n    </tr>\n    <tr>\n      <th>Month</th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1949-01-01</th>\n      <td>112</td>\n    </tr>\n    <tr>\n      <th>1949-02-01</th>\n      <td>118</td>\n    </tr>\n    <tr>\n      <th>1949-03-01</th>\n      <td>132</td>\n    </tr>\n    <tr>\n      <th>1949-04-01</th>\n      <td>129</td>\n    </tr>\n    <tr>\n      <th>1949-05-01</th>\n      <td>121</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>1960-08-01</th>\n      <td>606</td>\n    </tr>\n    <tr>\n      <th>1960-09-01</th>\n      <td>508</td>\n    </tr>\n    <tr>\n      <th>1960-10-01</th>\n      <td>461</td>\n    </tr>\n    <tr>\n      <th>1960-11-01</th>\n      <td>390</td>\n    </tr>\n    <tr>\n      <th>1960-12-01</th>\n      <td>432</td>\n    </tr>\n  </tbody>\n</table>\n<p>144 rows Ã— 1 columns</p>\n</div>\n```\n:::\n:::\n\n\n## ACF plot\n\n::: {.cell execution_count=40}\n``` {.python .cell-code}\ndata.info()\nplot_acf(data, lags=50)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nDatetimeIndex: 144 entries, 1949-01-01 to 1960-12-01\nData columns (total 1 columns):\n #   Column       Non-Null Count  Dtype\n---  ------       --------------  -----\n 0   #Passengers  144 non-null    int64\ndtypes: int64(1)\nmemory usage: 2.2 KB\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=40}\n![](file1_files/figure-revealjs/cell-41-output-2.png){width=813 height=431}\n:::\n\n::: {.cell-output .cell-output-display}\n![](file1_files/figure-revealjs/cell-41-output-3.png){width=813 height=431}\n:::\n:::\n\n\n## ACF\n\n![](time/a1.png)\n\n## ACF\n\n![](time/a2.png)\n\n## ACF\n\n![](time/a3.png)\n\n## ACF\n\n![](time/a4.png)\n\n## ACF\n\n![](time/a5.png)\n## Time series forecasting\n\n![](time/a6.png)\n\n## Training and Test Set\n\n![](time/train.png)\n\n## Simple time series forecasting technique\n\n![](time/m1.png)\n\n## Simple time series forecasting technique\n\n![](time/m2.png)\n\n## Simple time series forecasting technique\n\n![](time/m3.png)\n\n## Simple time series forecasting technique\n\n![](time/m4.png)\n\n## Simple time series forecasting technique\n\n![](time/m5.png)\n\n## References\n\n[https://jakevdp.github.io/PythonDataScienceHandbook/03.11-working-with-time-series.html](https://jakevdp.github.io/PythonDataScienceHandbook/03.11-working-with-time-series.html)\n\n",
    "supporting": [
      "file1_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}