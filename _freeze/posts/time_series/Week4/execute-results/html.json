{
  "hash": "a999b9ff180e92a6b32e6efe1d1b4826",
  "result": {
    "markdown": "---\ntitle: 'Week 4: AutoARIMA'\nformat:\n  revealjs:\n    slide-number: true\n    show-slide-number: all\n---\n\n## Modelling steps\n\n1. Plot the data.\n\n2. If necessary, transform the data (using a Box-Cox transformation) to stabilise the variance.\n\n~~3. If the data are non-stationary, take first differences of the data until the data are stationary.~~\n\n~~4. Examine the ACF/PACF to identify a suitable model.~~\n\n~~5. Try your chosen model(s), and use the AICc to search for a better model.~~\n\n##  Modelling steps (cont.)\n\n6. Check the residuals from your chosen model by plotting the ACF of the residuals, and doing a portmanteau test of the residuals. If they do not look like white noise, try a modified model.\n\n7. Once the residuals look like white noise, calculate forecasts.\n\n## Modelling steps: AutoARIMA\n\n1. Plot the data.\n\n2. If necessary, transform the data (using a Box-Cox transformation) to stabilise the variance.\n\n3. Use AutoARIMA to select a model.\n\n4. Check the residuals from your chosen model by plotting the ACF of the residuals, and doing a portmanteau test of the residuals. If they do not look like white noise, try a modified model.\n\n5. Once the residuals look like white noise, calculate forecasts.\n\n## Modeling with Python\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nfrom sktime import *\nfrom sktime.datasets import load_airline\nfrom sktime.utils.plotting import plot_series\ny = load_airline()\nplot_series(y)\n```\n\n::: {.cell-output .cell-output-display execution_count=105}\n```\n(<Figure size 1536x384 with 1 Axes>,\n <AxesSubplot: ylabel='Number of airline passengers'>)\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](Week4_files/figure-revealjs/cell-2-output-2.png){width=1263 height=337}\n:::\n:::\n\n\n## Your turn\n\nTake other important visualizations\n\n## Define forecast horizon\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nimport numpy as np\nimport pandas as pd\nfrom sktime.forecasting.base import ForecastingHorizon\nfh = ForecastingHorizon(\n    pd.PeriodIndex(pd.date_range(\"1960-01\", periods=12, freq=\"M\")), is_relative=False\n)\nfh\n```\n\n::: {.cell-output .cell-output-display execution_count=106}\n```\nForecastingHorizon(['1960-01', '1960-02', '1960-03', '1960-04', '1960-05', '1960-06',\n             '1960-07', '1960-08', '1960-09', '1960-10', '1960-11', '1960-12'],\n            dtype='period[M]', is_relative=False)\n```\n:::\n:::\n\n\n## Split data into training and test\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nfrom sktime.forecasting.model_selection import temporal_train_test_split\ny_train, y_test = temporal_train_test_split(y, fh=fh)\n```\n:::\n\n\n## Define forecaster with sktime\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nfrom sktime.forecasting.statsforecast import StatsForecastAutoARIMA\nimport numpy as np\nforecaster = StatsForecastAutoARIMA(  \n    sp=12,  max_p=2, max_q=2\n)\ny_train.naturallog = np.log(y_train)\nforecaster.fit(y_train.naturallog)\n```\n\n::: {.cell-output .cell-output-display execution_count=108}\n```{=html}\n<style>#sk-container-id-16 {color: black;background-color: white;}#sk-container-id-16 pre{padding: 0;}#sk-container-id-16 div.sk-toggleable {background-color: white;}#sk-container-id-16 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-16 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-16 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-16 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-16 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-16 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-16 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-16 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-16 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-16 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-16 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-16 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-16 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-16 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-16 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-16 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-16 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-16 div.sk-item {position: relative;z-index: 1;}#sk-container-id-16 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-16 div.sk-item::before, #sk-container-id-16 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-16 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-16 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-16 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-16 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-16 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-16 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-16 div.sk-label-container {text-align: center;}#sk-container-id-16 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-16 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-16\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>StatsForecastAutoARIMA(max_p=2, max_q=2, sp=12)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-16\" type=\"checkbox\" checked><label for=\"sk-estimator-id-16\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">StatsForecastAutoARIMA</label><div class=\"sk-toggleable__content\"><pre>StatsForecastAutoARIMA(max_p=2, max_q=2, sp=12)</pre></div></div></div></div></div>\n```\n:::\n:::\n\n\nsp: Number of observations per unit of time.\n\nHelp: https://www.sktime.org/en/stable/api_reference/auto_generated/sktime.forecasting.statsforecast.StatsForecastAutoARIMA.html\n\n## Your turn\n\nPreferm residual analysis\n\n## Obtain predictions for the training period\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\ny_pred = forecaster.predict(fh)\ny_pred \n```\n\n::: {.cell-output .cell-output-display execution_count=109}\n```\n1960-01    6.038882\n1960-02    5.989590\n1960-03    6.146032\n1960-04    6.119674\n1960-05    6.159455\n1960-06    6.304701\n1960-07    6.432675\n1960-08    6.444805\n1960-09    6.266803\n1960-10    6.136178\n1960-11    6.007715\n1960-12    6.114486\nFreq: M, dtype: float64\n```\n:::\n:::\n\n\n## Prediction intervals\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\ncoverage = 0.9\ny_pred_ints = forecaster.predict_interval(coverage=coverage)\ny_pred_ints\n```\n\n::: {.cell-output .cell-output-display execution_count=110}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead tr th {\n        text-align: left;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr>\n      <th></th>\n      <th colspan=\"2\" halign=\"left\">Coverage</th>\n    </tr>\n    <tr>\n      <th></th>\n      <th colspan=\"2\" halign=\"left\">0.9</th>\n    </tr>\n    <tr>\n      <th></th>\n      <th>lower</th>\n      <th>upper</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1960-01</th>\n      <td>5.978520</td>\n      <td>6.099244</td>\n    </tr>\n    <tr>\n      <th>1960-02</th>\n      <td>5.916820</td>\n      <td>6.062361</td>\n    </tr>\n    <tr>\n      <th>1960-03</th>\n      <td>6.062679</td>\n      <td>6.229384</td>\n    </tr>\n    <tr>\n      <th>1960-04</th>\n      <td>6.026940</td>\n      <td>6.212408</td>\n    </tr>\n    <tr>\n      <th>1960-05</th>\n      <td>6.058205</td>\n      <td>6.260705</td>\n    </tr>\n    <tr>\n      <th>1960-06</th>\n      <td>6.195598</td>\n      <td>6.413804</td>\n    </tr>\n    <tr>\n      <th>1960-07</th>\n      <td>6.316247</td>\n      <td>6.549103</td>\n    </tr>\n    <tr>\n      <th>1960-08</th>\n      <td>6.321487</td>\n      <td>6.568124</td>\n    </tr>\n    <tr>\n      <th>1960-09</th>\n      <td>6.136959</td>\n      <td>6.396648</td>\n    </tr>\n    <tr>\n      <th>1960-10</th>\n      <td>6.000121</td>\n      <td>6.272235</td>\n    </tr>\n    <tr>\n      <th>1960-11</th>\n      <td>5.865717</td>\n      <td>6.149713</td>\n    </tr>\n    <tr>\n      <th>1960-12</th>\n      <td>5.966786</td>\n      <td>6.262187</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Plotting values\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\ny_test.naturallog = np.log(y_test)\nfrom sktime.utils import plotting\n\n# also requires predictions\ny_pred = forecaster.predict()\n\nfig, ax = plotting.plot_series(y_train.naturallog, y_pred, labels=[\"y\", \"y_pred\"])\nax.fill_between(\n    ax.get_lines()[-1].get_xdata(),\n    y_pred_ints[\"Coverage\"][coverage][\"lower\"],\n    y_pred_ints[\"Coverage\"][coverage][\"upper\"],\n    alpha=0.2,\n    color=ax.get_lines()[-1].get_c(),\n    label=f\"{coverage}% prediction intervals\",\n)\nax.legend();\n```\n\n::: {.cell-output .cell-output-display}\n![](Week4_files/figure-revealjs/cell-8-output-1.png){width=1267 height=337}\n:::\n:::\n\n\n",
    "supporting": [
      "Week4_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}