---
title: "Week 4A: AutoARIMA"
format:
  revealjs:
    slide-number: true
    show-slide-number: all 
jupyter: python3
---

## Modelling steps

1. Plot the data.

2. If necessary, transform the data (using a Box-Cox transformation) to stabilise the variance.

~~3. If the data are non-stationary, take first differences of the data until the data are stationary.~~

~~4. Examine the ACF/PACF to identify a suitable model.~~

~~5. Try your chosen model(s), and use the AICc to search for a better model.~~

##  Modelling steps (cont.)

6. Check the residuals from your chosen model by plotting the ACF of the residuals, and doing a portmanteau test of the residuals. If they do not look like white noise, try a modified model.

7. Once the residuals look like white noise, calculate forecasts.

## Modelling steps: AutoARIMA

1. Plot the data.

2. If necessary, transform the data (using a Box-Cox transformation) to stabilise the variance.

3. Use AutoARIMA to select a model.

4. Check the residuals from your chosen model by plotting the ACF of the residuals, and doing a portmanteau test of the residuals. If they do not look like white noise, try a modified model.

5. Once the residuals look like white noise, calculate forecasts.

## Modeling with Python

```{python}
#| echo: true
from sktime import *
from sktime.datasets import load_airline
from sktime.utils.plotting import plot_series
y = load_airline()
plot_series(y)
```

## Your turn

Take other important visualizations

## Define forecast horizon

```{python}
#| echo: true
import numpy as np
import pandas as pd
from sktime.forecasting.base import ForecastingHorizon
fh = ForecastingHorizon(
    pd.PeriodIndex(pd.date_range("1960-01", periods=12, freq="M")), is_relative=False
)
fh

```

## Split data into training and test

```{python}
#| echo: true
from sktime.forecasting.model_selection import temporal_train_test_split
y_train, y_test = temporal_train_test_split(y, fh=fh)

```

## Define forecaster with sktime

```{python}
#| echo: true
from sktime.forecasting.statsforecast import StatsForecastAutoARIMA
import numpy as np
forecaster = StatsForecastAutoARIMA(  
    sp=12,  max_p=2, max_q=2
)
y_train.naturallog = np.log(y_train)
forecaster.fit(y_train.naturallog)
```

sp: Number of observations per unit of time.

Help: https://www.sktime.org/en/stable/api_reference/auto_generated/sktime.forecasting.statsforecast.StatsForecastAutoARIMA.html

## Your turn

Preferm residual analysis

## Obtain predictions for the training period

```{python}
#| echo: true
y_pred = forecaster.predict(fh)
y_pred 

```

## Prediction intervals

```{python}
#| echo: true
coverage = 0.9
y_pred_ints = forecaster.predict_interval(coverage=coverage)
y_pred_ints
```

## Plotting values

```{python}
#| echo: true
y_test.naturallog = np.log(y_test)
from sktime.utils import plotting

# also requires predictions
y_pred = forecaster.predict()

fig, ax = plotting.plot_series(y_train.naturallog, y_pred, labels=["y", "y_pred"])
ax.fill_between(
    ax.get_lines()[-1].get_xdata(),
    y_pred_ints["Coverage"][coverage]["lower"],
    y_pred_ints["Coverage"][coverage]["upper"],
    alpha=0.2,
    color=ax.get_lines()[-1].get_c(),
    label=f"{coverage}% prediction intervals",
)
ax.legend();

```

##

```{python}

y_test.naturallog = np.log(y_test)
from sktime.utils import plotting

# also requires predictions
y_pred = forecaster.predict()

fig, ax = plotting.plot_series(y_train.naturallog, y_pred, labels=["y", "y_pred"])
ax.fill_between(
    ax.get_lines()[-1].get_xdata(),
    y_pred_ints["Coverage"][coverage]["lower"],
    y_pred_ints["Coverage"][coverage]["upper"],
    alpha=0.2,
    color=ax.get_lines()[-1].get_c(),
    label=f"{coverage}% prediction intervals",
)
ax.legend();

```

## What is happening under the hood of AutoARIMA?


**Step 1:** Select the number of differences d and D via unit root tests and strength of seasonality measure.


**Step 2:** Try four possible models to start with:

##

i) $ARIMA(2, d, 2)$ if $m = 1$ and $ARIMA(2, d, 2)(1, D, 1)_m$ if $m > 1$.

ii) $ARIMA(0, d, 0)$ if $m = 1$ and $ARIMA(0, d, 0)(0, D, 0)_m$ if $m > 1$.

iii) $ARIMA(1, d, 0)$ if $m = 1$ and $ARIMA(1, d, 0)(1, D, 0)_m$ if $m > 1$.

iv) $ARIMA(0, d, 1)$ if $m = 1$ and $ARIMA(0, d, 1)(0, D, 1)_m$ if $m > 1$.

## 

**Step 3:** Select the model with the smallest AICc from step 2. This becomes the current model.


**Step 4:** Consider up to 13 variations on the current model:

i) Vary one of $p, q, P$ and $Q$ from the current model by $\pm 1$.

ii) $p, q$ both vary from the current model by $\pm 1$.

iii) $P, Q$ both vary from the current model by $\pm 1$.

iv) Include or exclude the constant term from the current model. Repeat step 4 until no lower AICc can be found. 

