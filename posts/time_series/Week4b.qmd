---
title: "Week 4B: Maps using Plotnine (Choropleth, Scatter, and Bubble Maps)"
format:
  revealjs:
    slide-number: true
    show-slide-number: all 
jupyter: python3
---

## packages

```{python}
#| echo: true
import plotnine
import geopandas as gpd
import pandas as pd
```

## Geospatial data about the whole world

```{python}
#| echo: true
world = gpd.read_file(gpd.datasets.get_path("naturalearth_lowres"))
print("Geometry Column Name : ", world.geometry.name)
print("Dataset Size : ", world.shape)
world.head()
```

## US States Geo JSON

```{python}
#| echo: true
us_states_geo = gpd.read_file("us-states.json")

us_states_geo.head()
```

## Work happiness data

```{python}
#| echo: true
world_happiness = pd.read_csv("world_happiness_2019.csv")
print("Dataset Size : ",world_happiness.shape)
world_happiness.head()
```

Data:https://github.com/sunny2309/datasets

## Merge data

```{python}
#| echo: true
world_total_data = world.merge(world_happiness, left_on="name", right_on="Country or region")
world_total_data.head()
```

## World Happiness Choropleth Map

```{python}
#| echo: true
from plotnine import ggplot, geom_map, aes, scale_fill_cmap, theme, labs

chart = ggplot(data=world_total_data, mapping=aes(fill="Score"))
map_proj = geom_map()
labels = labs(title="World Happiness Score Choropleth Map")
theme_details = theme(figure_size=(12,6))
colormap = scale_fill_cmap(cmap_name="Blues")

world_happiness_choropleth = chart + map_proj + labels + theme_details + colormap

world_happiness_choropleth
```

##

```{python}
from plotnine import ggplot, geom_map, aes, scale_fill_cmap, theme, labs

chart = ggplot(data=world_total_data, mapping=aes(fill="Score"))
map_proj = geom_map()
labels = labs(title="World Happiness Score Choropleth Map")
theme_details = theme(figure_size=(12,6))
colormap = scale_fill_cmap(cmap_name="Blues")

world_happiness_choropleth = chart + map_proj + labels + theme_details + colormap

world_happiness_choropleth
```


## World Healthy Life Expectancy Choropleth Map

```{python}
#| echo: true
from plotnine import scale_color_cmap

chart = ggplot(data=world_total_data, mapping=aes(fill="Healthy life expectancy", color="Healthy life expectancy"))
map_proj = geom_map()
labels = labs(title="World Healthy Life Expectancy Choropleth Map")
theme_details = theme(figure_size=(12,6))
fill_colormap = scale_fill_cmap(cmap_name="RdYlGn")
color_colormap = scale_color_cmap(cmap_name="RdYlGn")

world_happiness_choropleth = chart + map_proj + labels + theme_details + fill_colormap + color_colormap

world_happiness_choropleth

```

## World Healthy Life Expectancy Choropleth Map

```{python}
from plotnine import scale_color_cmap

chart = ggplot(data=world_total_data, mapping=aes(fill="Healthy life expectancy", color="Healthy life expectancy"))
map_proj = geom_map()
labels = labs(title="World Healthy Life Expectancy Choropleth Map")
theme_details = theme(figure_size=(12,6))
fill_colormap = scale_fill_cmap(cmap_name="RdYlGn")
color_colormap = scale_color_cmap(cmap_name="RdYlGn")

world_happiness_choropleth = chart + map_proj + labels + theme_details + fill_colormap + color_colormap

world_happiness_choropleth

```


## Map for ASIA

```{python}
#| echo: true
asia_data = world_total_data[world_total_data["continent"] == 'Asia']

chart = ggplot(data=asia_data, mapping=aes(fill="Freedom to make life choices", color="Freedom to make life choices"))
map_proj = geom_map()
labels = labs(title="Asia freedom to make life choices Choropleth Map")
theme_details = theme(figure_size=(10,7))
fill_colormap = scale_fill_cmap(cmap_name="PiYG")
color_colormap = scale_color_cmap(cmap_name="PiYG")

asia_happiness_choropleth = chart + map_proj + labels + theme_details + fill_colormap + color_colormap

asia_happiness_choropleth
```

##


```{python}
asia_data = world_total_data[world_total_data["continent"] == 'Asia']

chart = ggplot(data=asia_data, mapping=aes(fill="Freedom to make life choices", color="Freedom to make life choices"))
map_proj = geom_map()
labels = labs(title="Asia freedom to make life choices Choropleth Map")
theme_details = theme(figure_size=(10,7))
fill_colormap = scale_fill_cmap(cmap_name="PiYG")
color_colormap = scale_color_cmap(cmap_name="PiYG")

asia_happiness_choropleth = chart + map_proj + labels + theme_details + fill_colormap + color_colormap

asia_happiness_choropleth
```

## US States Population 2018 Choropleth Map

```{python}
#| echo: true
us_state_pop = pd.read_csv("State Populations.csv")
us_state_pop.head()
```

## Merge data

```{python}
#| echo: true
us_states_pop = us_states_geo.merge(us_state_pop, left_on="name", right_on="State")

us_states_pop.head()

```

## US population

```{python}
#| echo: true
from plotnine import scale_color_cmap, xlim, ylim, element_rect

chart = ggplot()
map_proj = geom_map(data=us_states_pop, mapping=aes(fill="2018 Population", color="2018 Population"))
labels = labs(title="US 2018 Population Choropleth Map")
theme_details = theme(figure_size=(10,6), panel_background=element_rect(fill="snow"))
fill_colormap = scale_fill_cmap(cmap_name="RdYlBu")
color_colormap = scale_color_cmap(cmap_name="RdYlBu")
xlimit = xlim(-170,-60)
ylimit = ylim(25, 72)

us_pop_choropleth = chart + map_proj + labels + theme_details + fill_colormap + color_colormap + xlimit + ylimit

us_pop_choropleth
```

##


```{python}
from plotnine import scale_color_cmap, xlim, ylim, element_rect

chart = ggplot()
map_proj = geom_map(data=us_states_pop, mapping=aes(fill="2018 Population", color="2018 Population"))
labels = labs(title="US 2018 Population Choropleth Map")
theme_details = theme(figure_size=(10,6), panel_background=element_rect(fill="snow"))
fill_colormap = scale_fill_cmap(cmap_name="RdYlBu")
color_colormap = scale_color_cmap(cmap_name="RdYlBu")
xlimit = xlim(-170,-60)
ylimit = ylim(25, 72)

us_pop_choropleth = chart + map_proj + labels + theme_details + fill_colormap + color_colormap + xlimit + ylimit

us_pop_choropleth
```

## Starbucks Store Count Per US States

```{python}
#| echo: true
starbucks_stores = pd.read_csv("starbucks_store_locations.csv")

starbucks_stores.head()
```

## Extract US data

```{python}
#| echo: true
us_stores = starbucks_stores[starbucks_stores.Country=="US"]
us_stores_statewise_cnt = us_stores.groupby("State/Province").count()[["Store Name"]].rename(columns={"Store Name":"Count"})
us_stores_statewise_cnt = us_stores_statewise_cnt.reset_index()
us_stores_statewise_cnt.head()
```

## Merge data

```{python}
#| echo: true
us_stores_statewise = us_states_geo.merge(us_stores_statewise_cnt, left_on="id", right_on="State/Province")

us_stores_statewise.head()
id	
```

## Map

```{python}
#| echo: true
from plotnine import scale_color_cmap, xlim, ylim, element_rect

chart = ggplot()
map_proj = geom_map(data=us_stores_statewise, mapping=aes(fill="Count", color="Count"))
labels = labs(title="Starbucks US Stores Choropleth Map")
theme_details = theme(figure_size=(10,6), panel_background=element_rect(fill="#a3ccff"))
fill_colormap = scale_fill_cmap(cmap_name="RdBu")
color_colormap = scale_color_cmap(cmap_name="RdBu")
xlimit = xlim(-170,-60)
ylimit = ylim(25, 72)

us_stores_choropleth = chart + map_proj + labels + theme_details + fill_colormap + color_colormap + xlimit + ylimit

us_stores_choropleth
```



## 

```{python}
from plotnine import scale_color_cmap, xlim, ylim, element_rect

chart = ggplot()
map_proj = geom_map(data=us_stores_statewise, mapping=aes(fill="Count", color="Count"))
labels = labs(title="Starbucks US Stores Choropleth Map")
theme_details = theme(figure_size=(10,6), panel_background=element_rect(fill="#a3ccff"))
fill_colormap = scale_fill_cmap(cmap_name="RdBu")
color_colormap = scale_color_cmap(cmap_name="RdBu")
xlimit = xlim(-170,-60)
ylimit = ylim(25, 72)

us_stores_choropleth = chart + map_proj + labels + theme_details + fill_colormap + color_colormap + xlimit + ylimit

us_stores_choropleth
```

## Scatter map

```{python}
# echo: true
from plotnine import geom_point

chart = ggplot(data=world)
map_proj = geom_map(fill="white", color="lightgrey")
labels = labs(title="World Starbucks Stores Scatter Map")
theme_details = theme(figure_size=(12,6.5))

scatter_points = geom_point(data=starbucks_stores.dropna(),
                            mapping=aes(x="Longitude", y="Latitude"),
                            color="tomato", alpha=0.3, size=1)

world_starbucks_stores = chart + map_proj + labels + theme_details + scatter_points

world_starbucks_stores

```


## 

```{python}
from plotnine import geom_point

chart = ggplot(data=world)
map_proj = geom_map(fill="white", color="lightgrey")
labels = labs(title="World Starbucks Stores Scatter Map")
theme_details = theme(figure_size=(12,6.5))

scatter_points = geom_point(data=starbucks_stores.dropna(),
                            mapping=aes(x="Longitude", y="Latitude"),
                            color="tomato", alpha=0.3, size=1)

world_starbucks_stores = chart + map_proj + labels + theme_details + scatter_points

world_starbucks_stores

```

## US scatter map

```{python}
#| echo: true
chart = ggplot(data=us_states_geo)
map_proj = geom_map(fill="white", color="lightgrey")
labels = labs(title="US Starbucks Stores Map")
theme_details = theme(figure_size=(12,6.5))
xlimit = xlim(-170,-60)
ylimit = ylim(25, 72)

scatter_points = geom_point(data=us_stores.dropna(),
                            mapping=aes(x="Longitude", y="Latitude"),
                            color="tomato", alpha=0.3, size=1)

us_starbucks_stores = chart + map_proj + labels + theme_details + xlimit + ylimit + scatter_points

us_starbucks_stores
```



## 

```{python}
chart = ggplot(data=us_states_geo)
map_proj = geom_map(fill="white", color="lightgrey")
labels = labs(title="US Starbucks Stores Map")
theme_details = theme(figure_size=(12,6.5))
xlimit = xlim(-170,-60)
ylimit = ylim(25, 72)

scatter_points = geom_point(data=us_stores.dropna(),
                            mapping=aes(x="Longitude", y="Latitude"),
                            color="tomato", alpha=0.3, size=1)

us_starbucks_stores = chart + map_proj + labels + theme_details + xlimit + ylimit + scatter_points

us_starbucks_stores
```

## Store Count per US States Bubble Map

```{python}
#| echo: true
def calculate_center(df):
    """
    Calculate the centre of a geometry

    This method first converts to a planar crs, gets the centroid
    then converts back to the original crs. This gives a more
    accurate
    """
    original_crs = df.crs
    planar_crs = 'EPSG:3857'
    return df['geometry'].to_crs(planar_crs).centroid.to_crs(original_crs)

us_stores_statewise["center"] = calculate_center(us_stores_statewise)
us_stores_statewise["x"] = [val.x for val in us_stores_statewise.center]
us_stores_statewise["x2"] = [val.x+2.2 for val in us_stores_statewise.center]
us_stores_statewise["y"] = [val.y for val in us_stores_statewise.center]



```

##

```{python}
#| echo: true
us_stores_statewise.head()
```

## Bubble map

```{python}
#| echo: true
from plotnine import geom_text

chart = ggplot(data=us_states_geo)
map_proj = geom_map(fill="white", color="lightgrey")
labels = labs(x="Longitude", y="Latitude", title="US Starbucks Stores Count Bubble Map", size="Store Count")
theme_details = theme(figure_size=(12,6.5))
xlimit = xlim(-170,-60)
ylimit = ylim(25, 72)

scatter_points = geom_point(data=us_stores_statewise.dropna(),
                            mapping=aes(x="x", y="y", size="Count"),
                            color="tomato", alpha=0.7)

texts = geom_text(data=us_stores_statewise.dropna(),
                            mapping=aes(x="x2", y="y", label="State/Province"),
                            color="black", size=8)

us_starbucks_stores = chart + map_proj + labels + theme_details + xlimit + ylimit + scatter_points + texts

us_starbucks_stores
```


##

```{python}
from plotnine import geom_text

chart = ggplot(data=us_states_geo)
map_proj = geom_map(fill="white", color="lightgrey")
labels = labs(x="Longitude", y="Latitude", title="US Starbucks Stores Count Bubble Map", size="Store Count")
theme_details = theme(figure_size=(12,6.5))
xlimit = xlim(-170,-60)
ylimit = ylim(25, 72)

scatter_points = geom_point(data=us_stores_statewise.dropna(),
                            mapping=aes(x="x", y="y", size="Count"),
                            color="tomato", alpha=0.7)

texts = geom_text(data=us_stores_statewise.dropna(),
                            mapping=aes(x="x2", y="y", label="State/Province"),
                            color="black", size=8)

us_starbucks_stores = chart + map_proj + labels + theme_details + xlimit + ylimit + scatter_points + texts

us_starbucks_stores

```

## Source

https://coderzcolumn.com/tutorials/data-science/maps-using-plotnine-choropleth-scatter-bubble-maps